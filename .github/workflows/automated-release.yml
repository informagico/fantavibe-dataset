name: Automated Release

on:
  # Run on schedule (e.g., daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Or trigger on push to main branch
  # push:
  #   branches: [ main ]

permissions:
  contents: write
  
jobs:
  generate-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Clone fantacalcio-py repository
      run: |
        git clone https://github.com/piopy/fantacalcio-py.git fantacalcio
        cd fantacalcio
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
    
    - name: Install dependencies
      working-directory: ./fantacalcio
      run: poetry install --no-interaction --no-ansi
    
    - name: Run fantacalcio script
      working-directory: ./fantacalcio
      run: poetry run python cli.py run --source fpedia
    
    - name: Find generated Excel file
      id: find_file
      run: |
        cd fantacalcio
        # Find the most recently created .xlsx file
        FILE_PATH=$(find . -name "*.xlsx" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
        if [ -z "$FILE_PATH" ]; then
          echo "No Excel file found!"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        echo "Found file: $FILE_PATH"
        # Convert to absolute path from workflow root
        FULL_PATH="fantacalcio/$FILE_PATH"
        echo "FILE_PATH=$FULL_PATH" >> $GITHUB_OUTPUT
        echo "ASSET_NAME=$(basename $FILE_PATH)" >> $GITHUB_OUTPUT
    
    - name: Generate timestamp
      id: timestamp
      run: echo "TIMESTAMP=$(date -u +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
    
    - name: Setup release branch and commit file
      run: |
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Check if release branch exists
        if git show-ref --verify --quiet refs/remotes/origin/release; then
          echo "Release branch exists, checking out..."
          git checkout -b release origin/release
        else
          echo "Creating new release branch..."
          git checkout -b release
        fi
        
        # Copy the generated file to the repository root with timestamped name
        NEW_FILENAME="${{ steps.timestamp.outputs.TIMESTAMP }}_${{ steps.find_file.outputs.ASSET_NAME }}"
        cp "${{ steps.find_file.outputs.FILE_PATH }}" "./$NEW_FILENAME"
        
        # Also create/update a "latest" version for easy access
        cp "${{ steps.find_file.outputs.FILE_PATH }}" "./latest_${{ steps.find_file.outputs.ASSET_NAME }}"
        
        # Add files to git
        git add "$NEW_FILENAME"
        git add "latest_${{ steps.find_file.outputs.ASSET_NAME }}"
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          # Commit the changes
          git commit -m "Automated release: ${{ steps.timestamp.outputs.TIMESTAMP }}
          
          Generated from fantacalcio-py source: fpedia
          Workflow run: ${{ github.run_id }}
          Trigger: ${{ github.event_name }}"
          
          # Push to release branch
          git push origin release
          
          echo "Successfully pushed to release branch"
        fi
