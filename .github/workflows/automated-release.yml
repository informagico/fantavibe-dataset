name: Automated Release

on:
  # Run on schedule (e.g., daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Or trigger on push to main branch
  # push:
  #   branches: [ main ]

permissions:
  contents: write
  
jobs:
  generate-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Clone fantacalcio-py repository
      run: |
        git clone https://github.com/piopy/fantacalcio-py.git fantacalcio
        cd fantacalcio
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
    
    - name: Install dependencies
      working-directory: ./fantacalcio
      run: poetry install --no-interaction --no-ansi
    
    - name: Run fantacalcio script
      working-directory: ./fantacalcio
      run: poetry run python cli.py run --source fpedia
    
    - name: Find generated Excel file
      id: find_file
      run: |
        cd fantacalcio
        # Find the most recently created .xlsx file
        FILE_PATH=$(find . -name "*.xlsx" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
        if [ -z "$FILE_PATH" ]; then
          echo "No Excel file found!"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        echo "Found file: $FILE_PATH"
        # Convert to absolute path from workflow root
        FULL_PATH="fantacalcio/$FILE_PATH"
        echo "FILE_PATH=$FULL_PATH" >> $GITHUB_OUTPUT
        echo "ASSET_NAME=$(basename $FILE_PATH)" >> $GITHUB_OUTPUT
    
    - name: Generate release tag
      id: tag
      run: echo "TAG=$(date -u +'%Y.%m.%d')" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release and Upload Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release and upload asset in one step using GitHub CLI
        gh release create "${{ steps.tag.outputs.TAG }}" \
          --title "Automated release ${{ steps.tag.outputs.TAG }}" \
          --notes "Generated automatically from GitHub Actions workflow." \
          --repo ${{ github.repository }} \
          "${{ steps.find_file.outputs.FILE_PATH }}#${{ steps.find_file.outputs.ASSET_NAME }}"
